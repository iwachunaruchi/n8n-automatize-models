# Docker Manager para n8n-automatize-models (PowerShell)
param(
    [Parameter(Position=0)]
    [string]$Command = "help",
    
    [Parameter(Position=1)]
    [string]$Service = "",
    
    [switch]$Force,
    [switch]$NoCache,
    [switch]$Help
)

# Funci√≥n para mostrar ayuda
function Show-Help {
    Write-Host "üê≥ Docker Manager para n8n-automatize-models" -ForegroundColor Blue
    Write-Host ""
    Write-Host "Uso: .\docker-manager.ps1 [COMANDO] [OPCIONES]"
    Write-Host ""
    Write-Host "COMANDOS PRINCIPALES:" -ForegroundColor Green
    Write-Host "  build           Construir todas las im√°genes"
    Write-Host "  up              Iniciar servicios de producci√≥n"
    Write-Host "  dev             Iniciar servicios de desarrollo"
    Write-Host "  down            Detener todos los servicios"
    Write-Host "  logs            Ver logs de servicios"
    Write-Host "  clean           Limpiar im√°genes y vol√∫menes"
    Write-Host "  status          Estado de servicios"
    Write-Host ""
    Write-Host "COMANDOS ESPEC√çFICOS:" -ForegroundColor Yellow
    Write-Host "  build-api       Construir solo la API"
    Write-Host "  restart-api     Reiniciar solo la API"
    Write-Host "  shell-api       Abrir shell en contenedor API"
    Write-Host "  training        Iniciar servicio de entrenamiento"
    Write-Host ""
    Write-Host "OPCIONES:" -ForegroundColor Cyan
    Write-Host "  -Force          Forzar recreaci√≥n de contenedores"
    Write-Host "  -NoCache        Construir sin usar cache"
    Write-Host ""
    Write-Host "EJEMPLOS:"
    Write-Host "  .\docker-manager.ps1 build           # Construir todo"
    Write-Host "  .\docker-manager.ps1 dev             # Desarrollo"
    Write-Host "  .\docker-manager.ps1 up -Force       # Producci√≥n forzada"
    Write-Host "  .\docker-manager.ps1 logs api        # Ver logs de API"
}

# Funci√≥n para verificar Docker
function Test-Docker {
    try {
        docker info | Out-Null
        return $true
    }
    catch {
        Write-Host "‚ùå Error: Docker no est√° corriendo" -ForegroundColor Red
        return $false
    }
}

# Funci√≥n para construir im√°genes
function Build-Images {
    $noCacheFlag = if ($NoCache) { "--no-cache" } else { "" }
    
    Write-Host "üî® Construyendo im√°genes Docker..." -ForegroundColor Blue
    
    # Construir imagen de producci√≥n
    Write-Host "üì¶ Construyendo imagen de producci√≥n..." -ForegroundColor Yellow
    docker build $noCacheFlag -t n8n-automatize-models:latest -f Dockerfile .
    
    # Construir imagen de desarrollo
    Write-Host "üõ†Ô∏è Construyendo imagen de desarrollo..." -ForegroundColor Yellow
    docker build $noCacheFlag -t n8n-automatize-models:dev -f Dockerfile.dev .
    
    Write-Host "‚úÖ Im√°genes construidas exitosamente" -ForegroundColor Green
}

# Funci√≥n para iniciar producci√≥n
function Start-Production {
    $forceFlag = if ($Force) { "--force-recreate" } else { "" }
    
    Write-Host "üöÄ Iniciando servicios de producci√≥n..." -ForegroundColor Blue
    docker-compose up -d $forceFlag
    
    Write-Host "‚úÖ Servicios iniciados" -ForegroundColor Green
    Write-Host "üåê URLs disponibles:" -ForegroundColor Yellow
    Write-Host "  API: http://localhost:8000"
    Write-Host "  API Docs: http://localhost:8000/docs"
    Write-Host "  n8n: http://localhost:5678"
    Write-Host "  MinIO: http://localhost:9001"
}

# Funci√≥n para iniciar desarrollo
function Start-Development {
    Write-Host "üõ†Ô∏è Iniciando servicios de desarrollo..." -ForegroundColor Blue
    docker-compose -f docker-compose.dev.yml up -d
    
    Write-Host "‚úÖ Servicios de desarrollo iniciados" -ForegroundColor Green
    Write-Host "üåê URLs disponibles:" -ForegroundColor Yellow
    Write-Host "  API (Dev): http://localhost:8000"
    Write-Host "  API Docs: http://localhost:8000/docs"
    Write-Host "  MinIO: http://localhost:9001"
}

# Funci√≥n para detener servicios
function Stop-Services {
    Write-Host "‚èπÔ∏è Deteniendo servicios..." -ForegroundColor Blue
    docker-compose down
    docker-compose -f docker-compose.dev.yml down 2>$null
    Write-Host "‚úÖ Servicios detenidos" -ForegroundColor Green
}

# Funci√≥n para mostrar logs
function Show-Logs {
    if ([string]::IsNullOrEmpty($Service)) {
        Write-Host "üìã Mostrando logs de todos los servicios..." -ForegroundColor Blue
        docker-compose logs -f --tail=100
    } else {
        Write-Host "üìã Mostrando logs de $Service..." -ForegroundColor Blue
        docker-compose logs -f --tail=100 $Service
    }
}

# Funci√≥n para limpiar Docker
function Clean-Docker {
    Write-Host "üßπ Limpiando im√°genes y vol√∫menes..." -ForegroundColor Yellow
    
    # Detener servicios
    Stop-Services
    
    # Limpiar contenedores detenidos
    docker container prune -f
    
    # Limpiar im√°genes sin usar
    docker image prune -f
    
    Write-Host "‚úÖ Limpieza completada" -ForegroundColor Green
}

# Funci√≥n para mostrar estado
function Show-Status {
    Write-Host "üìä Estado de servicios Docker..." -ForegroundColor Blue
    Write-Host ""
    Write-Host "Contenedores:" -ForegroundColor Yellow
    docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
    Write-Host ""
    Write-Host "Vol√∫menes:" -ForegroundColor Yellow
    docker volume ls --filter name=doc_restoration
    Write-Host ""
    Write-Host "Im√°genes del proyecto:" -ForegroundColor Yellow
    docker images --filter reference=n8n-automatize-models
}

# Funci√≥n para construir solo API
function Build-Api {
    Write-Host "üî® Construyendo imagen de API..." -ForegroundColor Blue
    docker build -t n8n-automatize-models:latest -f Dockerfile .
    Write-Host "‚úÖ Imagen de API construida" -ForegroundColor Green
}

# Funci√≥n para reiniciar API
function Restart-Api {
    Write-Host "üîÑ Reiniciando API..." -ForegroundColor Blue
    docker-compose restart doc-restoration-api
    Write-Host "‚úÖ API reiniciada" -ForegroundColor Green
}

# Funci√≥n para shell de API
function Shell-Api {
    Write-Host "üêö Abriendo shell en contenedor API..." -ForegroundColor Blue
    docker-compose exec doc-restoration-api /bin/bash
}

# Funci√≥n para entrenamiento
function Start-Training {
    Write-Host "üéØ Iniciando servicio de entrenamiento..." -ForegroundColor Blue
    docker-compose --profile training up -d training-service
    Write-Host "‚úÖ Servicio de entrenamiento iniciado" -ForegroundColor Green
}

# Script principal
if ($Help) {
    Show-Help
    exit 0
}

if (-not (Test-Docker)) {
    exit 1
}

switch ($Command.ToLower()) {
    "build" { Build-Images }
    "up" { Start-Production }
    "start" { Start-Production }
    "dev" { Start-Development }
    "development" { Start-Development }
    "down" { Stop-Services }
    "stop" { Stop-Services }
    "logs" { Show-Logs }
    "clean" { Clean-Docker }
    "status" { Show-Status }
    "build-api" { Build-Api }
    "restart-api" { Restart-Api }
    "shell-api" { Shell-Api }
    "training" { Start-Training }
    "help" { Show-Help }
    default {
        Write-Host "‚ùå Comando desconocido: $Command" -ForegroundColor Red
        Write-Host ""
        Show-Help
        exit 1
    }
}
