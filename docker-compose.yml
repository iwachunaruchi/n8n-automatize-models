version: '3.8'

services:
  # MinIO - Object Storage
  minio:
    image: minio/minio:latest
    container_name: minio-doc-restoration
    ports:
      - "9000:9000"      # API
      - "9001:9001"      # Console
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # MinIO Client - Para configuración inicial
  minio-setup:
    image: minio/mc:latest
    container_name: minio-setup
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set myminio http://minio:9000 minio minio123;
      /usr/bin/mc mb myminio/document-degraded || true;
      /usr/bin/mc mb myminio/document-clean || true;
      /usr/bin/mc mb myminio/document-restored || true;
      /usr/bin/mc mb myminio/document-training || true;
      /usr/bin/mc anonymous set public myminio/document-degraded;
      /usr/bin/mc anonymous set public myminio/document-clean;
      /usr/bin/mc anonymous set public myminio/document-restored;
      /usr/bin/mc anonymous set public myminio/document-training;
      echo 'Buckets creados y configurados como PÚBLICOS';
      "

  # PostgreSQL - Para n8n
  postgres:
    image: postgres:15-alpine
    container_name: postgres-n8n
    environment:
      POSTGRES_DB: n8n
      POSTGRES_USER: n8n
      POSTGRES_PASSWORD: n8n123
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U n8n"]
      interval: 30s
      timeout: 10s
      retries: 5

  # n8n - Workflow Automation
  n8n:
    image: n8nio/n8n:latest
    container_name: n8n-automation
    ports:
      - "5678:5678"
    environment:
      DB_TYPE: postgresdb
      DB_POSTGRESDB_HOST: postgres
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_DATABASE: n8n
      DB_POSTGRESDB_USER: n8n
      DB_POSTGRESDB_PASSWORD: n8n123
      N8N_BASIC_AUTH_ACTIVE: "true"
      N8N_BASIC_AUTH_USER: admin
      N8N_BASIC_AUTH_PASSWORD: admin123
      WEBHOOK_URL: http://localhost:5678/
      GENERIC_TIMEZONE: America/Mexico_City
    volumes:
      - n8n_data:/home/node/.n8n
      - ./n8n/workflows:/home/node/.n8n/workflows
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget --spider -q http://localhost:5678/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API de Restauración
  doc-restoration-api:
    build: .
    container_name: doc-restoration-api
    ports:
      - "8000:8000"
    environment:
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minio
      MINIO_SECRET_KEY: minio123
      MINIO_SECURE: "false"
      API_HOST: 0.0.0.0
      API_PORT: 8000
      # Variables para hot reload
      PYTHONPATH: /app
      WATCHFILES_FORCE_POLLING: "true"
    depends_on:
      - minio
      - postgres
    volumes:
      - ./outputs:/app/outputs
      - ./models:/app/models
      - ./src:/app/src
      - ./api:/app/api          # ✅ Hot reload para la API
      - ./config:/app/config    # ✅ Hot reload para configuraciones
    command: ["uvicorn", "api.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload", "--reload-dir", "/app/api", "--reload-dir", "/app/src"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  minio_data:
  postgres_data:
  n8n_data:
